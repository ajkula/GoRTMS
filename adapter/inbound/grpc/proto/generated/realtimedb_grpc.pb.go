// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: realtimedb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoRTMS_ListDomains_FullMethodName       = "/gortms.GoRTMS/ListDomains"
	GoRTMS_CreateDomain_FullMethodName      = "/gortms.GoRTMS/CreateDomain"
	GoRTMS_GetDomain_FullMethodName         = "/gortms.GoRTMS/GetDomain"
	GoRTMS_DeleteDomain_FullMethodName      = "/gortms.GoRTMS/DeleteDomain"
	GoRTMS_ListQueues_FullMethodName        = "/gortms.GoRTMS/ListQueues"
	GoRTMS_CreateQueue_FullMethodName       = "/gortms.GoRTMS/CreateQueue"
	GoRTMS_GetQueue_FullMethodName          = "/gortms.GoRTMS/GetQueue"
	GoRTMS_DeleteQueue_FullMethodName       = "/gortms.GoRTMS/DeleteQueue"
	GoRTMS_PublishMessage_FullMethodName    = "/gortms.GoRTMS/PublishMessage"
	GoRTMS_ConsumeMessages_FullMethodName   = "/gortms.GoRTMS/ConsumeMessages"
	GoRTMS_SubscribeToQueue_FullMethodName  = "/gortms.GoRTMS/SubscribeToQueue"
	GoRTMS_AddRoutingRule_FullMethodName    = "/gortms.GoRTMS/AddRoutingRule"
	GoRTMS_RemoveRoutingRule_FullMethodName = "/gortms.GoRTMS/RemoveRoutingRule"
	GoRTMS_ListRoutingRules_FullMethodName  = "/gortms.GoRTMS/ListRoutingRules"
)

// GoRTMSClient is the client API for GoRTMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service principal
type GoRTMSClient interface {
	// Opérations sur les domaines
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Opérations sur les files d'attente
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*QueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Opérations sur les messages
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error)
	ConsumeMessages(ctx context.Context, in *ConsumeMessagesRequest, opts ...grpc.CallOption) (*ConsumeMessagesResponse, error)
	SubscribeToQueue(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageResponse], error)
	// Opérations sur les règles de routage
	AddRoutingRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RemoveRoutingRule(ctx context.Context, in *RemoveRoutingRuleRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListRoutingRules(ctx context.Context, in *ListRoutingRulesRequest, opts ...grpc.CallOption) (*ListRoutingRulesResponse, error)
}

type goRTMSClient struct {
	cc grpc.ClientConnInterface
}

func NewGoRTMSClient(cc grpc.ClientConnInterface) GoRTMSClient {
	return &goRTMSClient{cc}
}

func (c *goRTMSClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, GoRTMS_ListDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, GoRTMS_CreateDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DomainResponse)
	err := c.cc.Invoke(ctx, GoRTMS_GetDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GoRTMS_DeleteDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, GoRTMS_ListQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, GoRTMS_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*QueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueResponse)
	err := c.cc.Invoke(ctx, GoRTMS_GetQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GoRTMS_DeleteQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishMessageResponse)
	err := c.cc.Invoke(ctx, GoRTMS_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) ConsumeMessages(ctx context.Context, in *ConsumeMessagesRequest, opts ...grpc.CallOption) (*ConsumeMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeMessagesResponse)
	err := c.cc.Invoke(ctx, GoRTMS_ConsumeMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) SubscribeToQueue(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GoRTMS_ServiceDesc.Streams[0], GoRTMS_SubscribeToQueue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, MessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoRTMS_SubscribeToQueueClient = grpc.ServerStreamingClient[MessageResponse]

func (c *goRTMSClient) AddRoutingRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GoRTMS_AddRoutingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) RemoveRoutingRule(ctx context.Context, in *RemoveRoutingRuleRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GoRTMS_RemoveRoutingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRTMSClient) ListRoutingRules(ctx context.Context, in *ListRoutingRulesRequest, opts ...grpc.CallOption) (*ListRoutingRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutingRulesResponse)
	err := c.cc.Invoke(ctx, GoRTMS_ListRoutingRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoRTMSServer is the server API for GoRTMS service.
// All implementations must embed UnimplementedGoRTMSServer
// for forward compatibility.
//
// Service principal
type GoRTMSServer interface {
	// Opérations sur les domaines
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	GetDomain(context.Context, *GetDomainRequest) (*DomainResponse, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*StatusResponse, error)
	// Opérations sur les files d'attente
	ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error)
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	GetQueue(context.Context, *GetQueueRequest) (*QueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*StatusResponse, error)
	// Opérations sur les messages
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error)
	ConsumeMessages(context.Context, *ConsumeMessagesRequest) (*ConsumeMessagesResponse, error)
	SubscribeToQueue(*SubscribeRequest, grpc.ServerStreamingServer[MessageResponse]) error
	// Opérations sur les règles de routage
	AddRoutingRule(context.Context, *AddRoutingRuleRequest) (*StatusResponse, error)
	RemoveRoutingRule(context.Context, *RemoveRoutingRuleRequest) (*StatusResponse, error)
	ListRoutingRules(context.Context, *ListRoutingRulesRequest) (*ListRoutingRulesResponse, error)
	mustEmbedUnimplementedGoRTMSServer()
}

// UnimplementedGoRTMSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoRTMSServer struct{}

func (UnimplementedGoRTMSServer) ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (UnimplementedGoRTMSServer) CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedGoRTMSServer) GetDomain(context.Context, *GetDomainRequest) (*DomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedGoRTMSServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedGoRTMSServer) ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedGoRTMSServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedGoRTMSServer) GetQueue(context.Context, *GetQueueRequest) (*QueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedGoRTMSServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedGoRTMSServer) PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedGoRTMSServer) ConsumeMessages(context.Context, *ConsumeMessagesRequest) (*ConsumeMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeMessages not implemented")
}
func (UnimplementedGoRTMSServer) SubscribeToQueue(*SubscribeRequest, grpc.ServerStreamingServer[MessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToQueue not implemented")
}
func (UnimplementedGoRTMSServer) AddRoutingRule(context.Context, *AddRoutingRuleRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutingRule not implemented")
}
func (UnimplementedGoRTMSServer) RemoveRoutingRule(context.Context, *RemoveRoutingRuleRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoutingRule not implemented")
}
func (UnimplementedGoRTMSServer) ListRoutingRules(context.Context, *ListRoutingRulesRequest) (*ListRoutingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutingRules not implemented")
}
func (UnimplementedGoRTMSServer) mustEmbedUnimplementedGoRTMSServer() {}
func (UnimplementedGoRTMSServer) testEmbeddedByValue()                {}

// UnsafeGoRTMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoRTMSServer will
// result in compilation errors.
type UnsafeGoRTMSServer interface {
	mustEmbedUnimplementedGoRTMSServer()
}

func RegisterGoRTMSServer(s grpc.ServiceRegistrar, srv GoRTMSServer) {
	// If the following call pancis, it indicates UnimplementedGoRTMSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoRTMS_ServiceDesc, srv)
}

func _GoRTMS_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_ListDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_GetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).ListQueues(ctx, req.(*ListQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_GetQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_ConsumeMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).ConsumeMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_ConsumeMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).ConsumeMessages(ctx, req.(*ConsumeMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_SubscribeToQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoRTMSServer).SubscribeToQueue(m, &grpc.GenericServerStream[SubscribeRequest, MessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoRTMS_SubscribeToQueueServer = grpc.ServerStreamingServer[MessageResponse]

func _GoRTMS_AddRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).AddRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_AddRoutingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).AddRoutingRule(ctx, req.(*AddRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_RemoveRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).RemoveRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_RemoveRoutingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).RemoveRoutingRule(ctx, req.(*RemoveRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRTMS_ListRoutingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRTMSServer).ListRoutingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRTMS_ListRoutingRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRTMSServer).ListRoutingRules(ctx, req.(*ListRoutingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoRTMS_ServiceDesc is the grpc.ServiceDesc for GoRTMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoRTMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gortms.GoRTMS",
	HandlerType: (*GoRTMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDomains",
			Handler:    _GoRTMS_ListDomains_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _GoRTMS_CreateDomain_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _GoRTMS_GetDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _GoRTMS_DeleteDomain_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _GoRTMS_ListQueues_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _GoRTMS_CreateQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _GoRTMS_GetQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _GoRTMS_DeleteQueue_Handler,
		},
		{
			MethodName: "PublishMessage",
			Handler:    _GoRTMS_PublishMessage_Handler,
		},
		{
			MethodName: "ConsumeMessages",
			Handler:    _GoRTMS_ConsumeMessages_Handler,
		},
		{
			MethodName: "AddRoutingRule",
			Handler:    _GoRTMS_AddRoutingRule_Handler,
		},
		{
			MethodName: "RemoveRoutingRule",
			Handler:    _GoRTMS_RemoveRoutingRule_Handler,
		},
		{
			MethodName: "ListRoutingRules",
			Handler:    _GoRTMS_ListRoutingRules_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToQueue",
			Handler:       _GoRTMS_SubscribeToQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "realtimedb.proto",
}
